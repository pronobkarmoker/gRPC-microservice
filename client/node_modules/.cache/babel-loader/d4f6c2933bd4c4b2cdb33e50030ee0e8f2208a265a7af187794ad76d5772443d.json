{"ast":null,"code":"import axios from 'axios';\n\n// Configure axios for the proxy server\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`🚀 HTTP->gRPC Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  if (config.data) {\n    console.log('📊 Request Data:', config.data);\n  }\n  return config;\n}, error => {\n  console.error('❌ Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for logging and error handling\napi.interceptors.response.use(response => {\n  console.log(`✅ HTTP->gRPC Response: ${response.status} ${response.config.url}`);\n  console.log('📊 Response Data:', response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('❌ HTTP->gRPC Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n/**\r\n * gRPC Client Service\r\n * This service communicates with the gRPC server through HTTP proxy\r\n */\nclass GrpcClientService {\n  constructor() {\n    this.serviceName = 'UserService';\n  }\n\n  /**\r\n   * Health check - Test gRPC connection\r\n   */\n  async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return {\n        success: true,\n        data: response.data,\n        message: 'Service is healthy'\n      };\n    } catch (error) {\n      var _error$response2;\n      return {\n        success: false,\n        message: 'Service unavailable',\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message\n      };\n    }\n  }\n\n  /**\r\n   * Get user by ID\r\n   * gRPC Method: GetUser(GetUserRequest) -> GetUserResponse\r\n   */\n  async getUser(id) {\n    try {\n      const response = await api.get(`/api/users/${id}`);\n      return {\n        success: response.data.success,\n        user: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response4$data;\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 404) {\n        return {\n          success: false,\n          user: null,\n          message: 'User not found',\n          error_code: 'USER_NOT_FOUND'\n        };\n      }\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to get user');\n    }\n  }\n\n  /**\r\n   * Create new user\r\n   * gRPC Method: CreateUser(CreateUserRequest) -> CreateUserResponse\r\n   */\n  async createUser(userData) {\n    try {\n      const response = await api.post('/api/users', userData);\n      return {\n        success: response.data.success,\n        user: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response6$data;\n      if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 400) {\n        return {\n          success: false,\n          user: null,\n          message: error.response.data.message,\n          error_code: error.response.data.error_code\n        };\n      }\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to create user');\n    }\n  }\n\n  /**\r\n   * List users with pagination and search\r\n   * gRPC Method: ListUsers(ListUsersRequest) -> ListUsersResponse\r\n   */\n  async listUsers(page = 1, limit = 10, search = '') {\n    try {\n      const params = {\n        page,\n        limit\n      };\n      if (search) {\n        params.search = search;\n      }\n      const response = await api.get('/api/users', {\n        params\n      });\n      return {\n        success: response.data.success,\n        users: response.data.data.users,\n        total: response.data.data.pagination.total,\n        page: response.data.data.pagination.page,\n        limit: response.data.data.pagination.limit,\n        totalPages: response.data.data.pagination.totalPages,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to list users');\n    }\n  }\n\n  /**\r\n   * Update existing user\r\n   * gRPC Method: UpdateUser(UpdateUserRequest) -> UpdateUserResponse\r\n   */\n  async updateUser(id, userData) {\n    try {\n      const response = await api.put(`/api/users/${id}`, userData);\n      return {\n        success: response.data.success,\n        user: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response8, _error$response9, _error$response0, _error$response0$data;\n      if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 404) {\n        return {\n          success: false,\n          user: null,\n          message: 'User not found',\n          error_code: 'USER_NOT_FOUND'\n        };\n      }\n      if (((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) === 400) {\n        return {\n          success: false,\n          user: null,\n          message: error.response.data.message,\n          error_code: error.response.data.error_code\n        };\n      }\n      throw new Error(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to update user');\n    }\n  }\n\n  /**\r\n   * Delete user by ID\r\n   * gRPC Method: DeleteUser(DeleteUserRequest) -> DeleteUserResponse\r\n   */\n  async deleteUser(id) {\n    try {\n      const response = await api.delete(`/api/users/${id}`);\n      return {\n        success: response.data.success,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response1, _error$response10, _error$response10$dat;\n      if (((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status) === 404) {\n        return {\n          success: false,\n          message: 'User not found',\n          error_code: 'USER_NOT_FOUND'\n        };\n      }\n      throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to delete user');\n    }\n  }\n\n  /**\r\n   * Batch operations helper\r\n   */\n  async batchGetUsers(ids) {\n    try {\n      const promises = ids.map(id => this.getUser(id));\n      const results = await Promise.allSettled(promises);\n      return results.map((result, index) => {\n        var _result$value;\n        return {\n          id: ids[index],\n          success: result.status === 'fulfilled' && result.value.success,\n          user: result.status === 'fulfilled' ? result.value.user : null,\n          error: result.status === 'rejected' ? result.reason.message : ((_result$value = result.value) === null || _result$value === void 0 ? void 0 : _result$value.success) === false ? result.value.message : null\n        };\n      });\n    } catch (error) {\n      throw new Error('Failed to batch get users');\n    }\n  }\n}\n\n// Export singleton instance\nconst grpcClient = new GrpcClientService();\nexport default grpcClient;\n\n// Export class for testing\nexport { GrpcClientService };","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","message","GrpcClientService","constructor","serviceName","healthCheck","get","success","_error$response2","getUser","id","user","_error$response3","_error$response4","_error$response4$data","error_code","Error","createUser","userData","post","_error$response5","_error$response6","_error$response6$data","listUsers","page","limit","search","params","users","total","pagination","totalPages","_error$response7","_error$response7$data","updateUser","put","_error$response8","_error$response9","_error$response0","_error$response0$data","deleteUser","delete","_error$response1","_error$response10","_error$response10$dat","batchGetUsers","ids","promises","map","results","allSettled","result","index","_result$value","value","reason","grpcClient"],"sources":["C:/Users/Shuvo/OneDrive/Desktop/Shuvo'sCODE/gRPC-microservice/client/src/services/grpcClient.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configure axios for the proxy server\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`🚀 HTTP->gRPC Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    if (config.data) {\r\n      console.log('📊 Request Data:', config.data);\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('❌ Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for logging and error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`✅ HTTP->gRPC Response: ${response.status} ${response.config.url}`);\r\n    console.log('📊 Response Data:', response.data);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('❌ HTTP->gRPC Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * gRPC Client Service\r\n * This service communicates with the gRPC server through HTTP proxy\r\n */\r\nclass GrpcClientService {\r\n  constructor() {\r\n    this.serviceName = 'UserService';\r\n  }\r\n\r\n  /**\r\n   * Health check - Test gRPC connection\r\n   */\r\n  async healthCheck() {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return {\r\n        success: true,\r\n        data: response.data,\r\n        message: 'Service is healthy'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: 'Service unavailable',\r\n        error: error.response?.data || error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user by ID\r\n   * gRPC Method: GetUser(GetUserRequest) -> GetUserResponse\r\n   */\r\n  async getUser(id) {\r\n    try {\r\n      const response = await api.get(`/api/users/${id}`);\r\n      return {\r\n        success: response.data.success,\r\n        user: response.data.data,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      if (error.response?.status === 404) {\r\n        return {\r\n          success: false,\r\n          user: null,\r\n          message: 'User not found',\r\n          error_code: 'USER_NOT_FOUND'\r\n        };\r\n      }\r\n      throw new Error(error.response?.data?.message || 'Failed to get user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create new user\r\n   * gRPC Method: CreateUser(CreateUserRequest) -> CreateUserResponse\r\n   */\r\n  async createUser(userData) {\r\n    try {\r\n      const response = await api.post('/api/users', userData);\r\n      return {\r\n        success: response.data.success,\r\n        user: response.data.data,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      if (error.response?.status === 400) {\r\n        return {\r\n          success: false,\r\n          user: null,\r\n          message: error.response.data.message,\r\n          error_code: error.response.data.error_code\r\n        };\r\n      }\r\n      throw new Error(error.response?.data?.message || 'Failed to create user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * List users with pagination and search\r\n   * gRPC Method: ListUsers(ListUsersRequest) -> ListUsersResponse\r\n   */\r\n  async listUsers(page = 1, limit = 10, search = '') {\r\n    try {\r\n      const params = { page, limit };\r\n      if (search) {\r\n        params.search = search;\r\n      }\r\n\r\n      const response = await api.get('/api/users', { params });\r\n      return {\r\n        success: response.data.success,\r\n        users: response.data.data.users,\r\n        total: response.data.data.pagination.total,\r\n        page: response.data.data.pagination.page,\r\n        limit: response.data.data.pagination.limit,\r\n        totalPages: response.data.data.pagination.totalPages,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to list users');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update existing user\r\n   * gRPC Method: UpdateUser(UpdateUserRequest) -> UpdateUserResponse\r\n   */\r\n  async updateUser(id, userData) {\r\n    try {\r\n      const response = await api.put(`/api/users/${id}`, userData);\r\n      return {\r\n        success: response.data.success,\r\n        user: response.data.data,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      if (error.response?.status === 404) {\r\n        return {\r\n          success: false,\r\n          user: null,\r\n          message: 'User not found',\r\n          error_code: 'USER_NOT_FOUND'\r\n        };\r\n      }\r\n      if (error.response?.status === 400) {\r\n        return {\r\n          success: false,\r\n          user: null,\r\n          message: error.response.data.message,\r\n          error_code: error.response.data.error_code\r\n        };\r\n      }\r\n      throw new Error(error.response?.data?.message || 'Failed to update user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete user by ID\r\n   * gRPC Method: DeleteUser(DeleteUserRequest) -> DeleteUserResponse\r\n   */\r\n  async deleteUser(id) {\r\n    try {\r\n      const response = await api.delete(`/api/users/${id}`);\r\n      return {\r\n        success: response.data.success,\r\n        message: response.data.message\r\n      };\r\n    } catch (error) {\r\n      if (error.response?.status === 404) {\r\n        return {\r\n          success: false,\r\n          message: 'User not found',\r\n          error_code: 'USER_NOT_FOUND'\r\n        };\r\n      }\r\n      throw new Error(error.response?.data?.message || 'Failed to delete user');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch operations helper\r\n   */\r\n  async batchGetUsers(ids) {\r\n    try {\r\n      const promises = ids.map(id => this.getUser(id));\r\n      const results = await Promise.allSettled(promises);\r\n      \r\n      return results.map((result, index) => ({\r\n        id: ids[index],\r\n        success: result.status === 'fulfilled' && result.value.success,\r\n        user: result.status === 'fulfilled' ? result.value.user : null,\r\n        error: result.status === 'rejected' ? result.reason.message : \r\n               (result.value?.success === false ? result.value.message : null)\r\n      }));\r\n    } catch (error) {\r\n      throw new Error('Failed to batch get users');\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst grpcClient = new GrpcClientService();\r\nexport default grpcClient;\r\n\r\n// Export class for testing\r\nexport { GrpcClientService };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}